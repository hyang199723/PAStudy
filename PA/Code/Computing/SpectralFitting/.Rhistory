if (log(runif(1))<MH1)
{
lrangeU=canrange1
}
# range2
Ss=exp_corr(dv2,range = exp(lrangeV))
#curll2 = sum(apply(Rv,2,dmvnorm,mean=rep(0,n2),sigma=Ss,log=TRUE))
curll2 = sum(dmvnorm(t(Rv), mean = rep(0,n2),sigma=Ss,log=TRUE ))
prior_curll2=dnorm(lrangeV,mean=priorR_mn2,sd=priorR_sd2,log=TRUE)
canrange2 = rnorm(1,lrangeV,0.1)
canS = exp_corr(dv2,range=exp(canrange2))
#canll2 = dmvnorm(Rv,rep(0,n2),canS,log=TRUE)
canll2 = sum(dmvnorm(t(Rv), mean = rep(0,n2),sigma=canS,log=TRUE ))
prior_canll2=dnorm(canrange2,mean=priorR_mn2,sd=priorR_sd2,log=TRUE)
MH2 <- canll2-curll2+prior_canll2-prior_curll2+dnorm(canrange2,log=TRUE)-dnorm(lrangeV,log=TRUE)
if (log(runif(1))<MH2)
{
lrangeV=canrange2
}
rangeU = exp(lrangeU)
rangeV = exp(lrangeV)
##############################################:
#####        KEEP TRACK OF STUFF       #######:
##############################################:
keep.rangeU[iter,ttt] = rangeU
keep.rangeV[iter,ttt] = rangeV
keep.sigmaU[, iter,ttt] = sigmaU
keep.sigmaV[, iter,ttt] = sigmaV
keep.taus1[iter,ttt] = taus1
keep.taus2[iter,ttt] = taus2
keep.taue1[iter,ttt] = taue1
keep.taue2[iter,ttt] = taue2
keep.A[, iter,ttt] = A
# keep.u1[,,iter]=U1
# keep.u2[,,iter]=U2
# keep.v2[,,iter]=V2
keep.Y1.M[,,iter,ttt]=as.matrix(Y1)
keep.Y2.M[,,iter,ttt]=as.matrix(Y2)
#print(iter)
} # End of thin
# This script is for computationally intense tasks that runs on high performance machine
# All data and source files need to be stored under the same directory
# This includes the main LMC functions
# This script has two functions, LMC_fit and compact.LMC_fit
# Last update: 12/01/2021
# Script to apply LMC functions to real data
# Last update: 12/01/2021
rm(list=ls())
# Set working directory to current
library(rstudioapi)
curpath = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(curpath)
library(fields)
library(glue)
library(viridis)
#library(geoR)
library(truncnorm)
library(tidyr)
library(mvtnorm)
source('ExtraFunctions.R')
source('LMC_function.R')
OR = as.POSIXct('1970-01-01', tz = 'UTC')
########################
#### Simulated data ####
########################
#source('simAllTS.R')
####################
#### Real Data #####
####################
PA_raw <- read.csv("PA_2020_Hourly_Formatted.csv")
FRM_raw <- read.csv("FRM_2020_Hourly_Formatted.csv")
PA_raw <- PA_raw[order(PA_raw$Timestamp), ]
FRM_raw <- FRM_raw[order(FRM_raw$Timestamp), ]
PA_data <- PA_raw
FRM_data <- FRM_raw
# Convert timestamp
# Note: We need to convert time to EST to avoid NA time issue
# For PA data, there is no missingness after conversion
# However, for FRM data, there are 20 missing values
PA_data$Timestamp <- as.POSIXct(PA_raw$Timestamp, tz = 'EST', format = "%Y-%m-%d %H:%M:%OS")
FRM_data$Timestamp <- as.POSIXct(FRM_raw$Timestamp, tz= 'EST', format = "%Y-%m-%d %H:%M:%OS")
# Get rid of missingness in FRM
FRM_data <- FRM_data[!is.na(FRM_data$Timestamp), ]
# Complete Purple Air timestamps
time <- unique(PA_data$Timestamp)
int.seq <- as.numeric(time) / 3600
int.start = int.seq[1]
int.end = int.seq[length(int.seq)]
complete = int.start:int.end
pa.missing = complete[!(complete %in% int.seq)]
time.missing = as.POSIXct(pa.missing * 3600, origin = OR)
lon = PA_data[1,1]
lat = PA_data[1,2]
df <- data.frame(Lon = lon, Lat = lat, Timestamp = time.missing, PM25 = NA)
PA.complete = rbind(PA_data, df)
# Complete FRM data
time <- unique(FRM_data$Timestamp)
int.seq <- as.numeric(time) / 3600
int.start = int.seq[1]
int.end = int.seq[length(int.seq)]
complete = int.start:int.end
frm.missing = complete[!(complete %in% int.seq)]
time.missing = as.POSIXct(frm.missing * 3600, origin = OR)
lon = FRM_data[1,1]
lat = FRM_data[1,2]
df <- data.frame(Lon = lon, Lat = lat, Timestamp = rep(time.missing, each = length(lon)), PM25 = NA)
FRM.complete = rbind(FRM_data, df)
# Check NAs in PA and FRM data
sum(is.na(PA.complete$Timestamp))
sum(is.na(FRM.complete$Timestamp))
start = as.POSIXct('2020-03-01 05:00:00')
end = as.POSIXct('2020-04-01 23:00:00') # 67 timstamps/spectrums Oct 2 FRM stations OCt 1 - 7
interval = (as.numeric(end) - as.numeric(start)) / 3600
print(interval + 1)
pa <- subset(PA.complete, (Timestamp >= start) & (Timestamp <= end))
frm <- subset(FRM.complete, (Timestamp >= start) & (Timestamp <= end))
# Get data to desired format
frmTS <- pivot_wider(frm, names_from = Timestamp, values_from = PM25)
paTS <- pivot_wider(pa, names_from = Timestamp, values_from = PM25)
dim(frmTS)
dim(paTS)
# Record locations of PA and FRM stations
s1 <- as.matrix(frmTS[, 1:2])
s2 <- as.matrix(paTS[, 1:2])
# Get rid of the locations
frmTS <- frmTS[, -c(1:2)]
paTS <- paTS[, -c(1:2)]
Y1 = as.matrix(data.frame(frmTS))
colnames(Y1)=NULL
Y2 = as.matrix(data.frame(paTS))
colnames(Y2)=NULL
Y2 = Y2[1:75, ]
s2 = s2[1:75, ]
#####################
### Fit the model ###
#####################
#exit2=Compact.LMC_fit(Y1,Y2, s1,s2,iters=6000)
#2042.504--> simudata
start = proc.time()[3]
exit1 = LMC_fit(Y1, Y2, s1, s2, iters = 6000, thin = 1)
end = proc.time()[3]
#2389.701
# This script is for computationally intense tasks that runs on high performance machine
# All data and source files need to be stored under the same directory
# This includes the main LMC functions
# This script has two functions, LMC_fit and compact.LMC_fit
# Last update: 12/01/2021
# Script to apply LMC functions to real data
# Last update: 12/01/2021
rm(list=ls())
# Set working directory to current
library(rstudioapi)
curpath = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(curpath)
library(fields)
library(glue)
library(viridis)
#library(geoR)
library(truncnorm)
library(tidyr)
library(mvtnorm)
source('ExtraFunctions.R')
source('LMC_function.R')
OR = as.POSIXct('1970-01-01', tz = 'UTC')
########################
#### Simulated data ####
########################
#source('simAllTS.R')
####################
#### Real Data #####
####################
PA_raw <- read.csv("PA_2020_Hourly_Formatted.csv")
FRM_raw <- read.csv("FRM_2020_Hourly_Formatted.csv")
PA_raw <- PA_raw[order(PA_raw$Timestamp), ]
FRM_raw <- FRM_raw[order(FRM_raw$Timestamp), ]
PA_data <- PA_raw
FRM_data <- FRM_raw
# Convert timestamp
# Note: We need to convert time to EST to avoid NA time issue
# For PA data, there is no missingness after conversion
# However, for FRM data, there are 20 missing values
PA_data$Timestamp <- as.POSIXct(PA_raw$Timestamp, tz = 'EST', format = "%Y-%m-%d %H:%M:%OS")
FRM_data$Timestamp <- as.POSIXct(FRM_raw$Timestamp, tz= 'EST', format = "%Y-%m-%d %H:%M:%OS")
# Get rid of missingness in FRM
FRM_data <- FRM_data[!is.na(FRM_data$Timestamp), ]
# Complete Purple Air timestamps
time <- unique(PA_data$Timestamp)
int.seq <- as.numeric(time) / 3600
int.start = int.seq[1]
int.end = int.seq[length(int.seq)]
complete = int.start:int.end
pa.missing = complete[!(complete %in% int.seq)]
time.missing = as.POSIXct(pa.missing * 3600, origin = OR)
lon = PA_data[1,1]
lat = PA_data[1,2]
df <- data.frame(Lon = lon, Lat = lat, Timestamp = time.missing, PM25 = NA)
PA.complete = rbind(PA_data, df)
# Complete FRM data
time <- unique(FRM_data$Timestamp)
int.seq <- as.numeric(time) / 3600
int.start = int.seq[1]
int.end = int.seq[length(int.seq)]
complete = int.start:int.end
frm.missing = complete[!(complete %in% int.seq)]
time.missing = as.POSIXct(frm.missing * 3600, origin = OR)
lon = FRM_data[1,1]
lat = FRM_data[1,2]
df <- data.frame(Lon = lon, Lat = lat, Timestamp = rep(time.missing, each = length(lon)), PM25 = NA)
FRM.complete = rbind(FRM_data, df)
# Check NAs in PA and FRM data
sum(is.na(PA.complete$Timestamp))
sum(is.na(FRM.complete$Timestamp))
start = as.POSIXct('2020-03-01 05:00:00')
end = as.POSIXct('2020-04-01 23:00:00') # 67 timstamps/spectrums Oct 2 FRM stations OCt 1 - 7
interval = (as.numeric(end) - as.numeric(start)) / 3600
print(interval + 1)
pa <- subset(PA.complete, (Timestamp >= start) & (Timestamp <= end))
frm <- subset(FRM.complete, (Timestamp >= start) & (Timestamp <= end))
# Get data to desired format
frmTS <- pivot_wider(frm, names_from = Timestamp, values_from = PM25)
paTS <- pivot_wider(pa, names_from = Timestamp, values_from = PM25)
dim(frmTS)
dim(paTS)
# Record locations of PA and FRM stations
s1 <- as.matrix(frmTS[, 1:2])
s2 <- as.matrix(paTS[, 1:2])
# Get rid of the locations
frmTS <- frmTS[, -c(1:2)]
paTS <- paTS[, -c(1:2)]
Y1 = as.matrix(data.frame(frmTS))
colnames(Y1)=NULL
Y2 = as.matrix(data.frame(paTS))
colnames(Y2)=NULL
#####################
### Fit the model ###
#####################
#exit2=Compact.LMC_fit(Y1,Y2, s1,s2,iters=6000)
#2042.504--> simudata
start = proc.time()[3]
exit1 = LMC_fit(Y1, Y2, s1, s2, iters = 3000, thin = 1)
end = proc.time()[3]
#2389.701
end - start
1931/60
32*4
# Create data frame
nchain=c()
param=c()
val=c()
iter=c()
freq=c()
nchain2=c()
param2=c()
val2=c()
iter2=c()
freq2=c()
for (i in 1:thin)
{
#rangeU
val=c(val,exit1$rangeU[,i])
param=c(param,rep("rangeU",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#rangeV
val=c(val,exit1$rangeV[,i])
param=c(param,rep("rangeV",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau1
val=c(val,exit1$tau1[,i])
param=c(param,rep("tau1",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau2
val=c(val,exit1$tau2[,i])
param=c(param,rep("tau2",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#A
val2=c(val2,as.vector(exit1$A[,,i]))
param2=c(param2,rep('A',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaU
val2=c(val2,as.vector(exit1$sigmaU[,,i]))
param2=c(param2,rep('sigmaU',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaV
val2=c(val2,as.vector(exit1$sigmaV[,,i]))
param2=c(param2,rep('sigmaV',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
}
res1=data.frame(val,param,nchain,iter,freq)
res2=data.frame(val=val2,param=param2,nchain=nchain2,iter=iter2,freq=freq2)
res1$nchain=as.factor(res1$nchain)
res2$nchain=as.factor(res2$nchain)
#plot range
prang1=ggplot(res1 %>% filter(param=='rangeU'))+geom_line(aes(x=iter,y=val,col=nchain))+theme_bw()
prang2=ggplot(res1 %>% filter(param=='rangeV'))+geom_line(aes(x=iter,y=val,col=nchain))+theme_bw()
# ggsave('PostRange1.png',prang1)
# ggsave('PostRange2.png',prang2)
ptau1=ggplot(res1 %>% filter(param=='tau1'))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+theme_bw()
ptau2=ggplot(res1 %>% filter(param=='tau2'))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+theme_bw()+ylim(c(0,1))
# ggsave('PostTau1.png',ptau1)
# ggsave('PostTau2.png',ptau2)
# plots by freq
freq1=1:round(dim(Y2)[2]/2)
freq2=(round(dim(Y2)[2]/2)+1):dim(Y2)[2]
pA_1=ggplot(res2%>% filter(param=='A',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
pA_2=ggplot(res2%>% filter(param=='A',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostA_frq1:15.png',pA_1)
# ggsave('PostA_frq16:30.png',pA_2)
psigmaU_1=ggplot(res2%>% filter(param=='sigmaU',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
psigmaU_2=ggplot(res2%>% filter(param=='sigmaU',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostSimaU_frq1:15.png',psigmaU_1)
# ggsave('PostSimaU_frq16:30.png',psigmaU_2)
psigmaV_1=ggplot(res2%>% filter(param=='sigmaV',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
psigmaV_2=ggplot(res2%>% filter(param=='sigmaV',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostSigmaV_frq1:15.png',psigmaV_1)
# ggsave('PostSigmaV_frq16:30.png',psigmaV_2)
########################################################
############# Cross validation analysis ################
########################################################
nsites.1=nrow(Y1)
nsites.2=nrow(Y2)
iters=3000
burn=1000
K=5
ks1=c()
sites1=c()
times1=c()
vals1=c()
posIter1=c()
ks2=c()
sites2=c()
times2=c()
vals2=c()
posIter2=c()
for (i in 1:K)
{
r.n=round(nsites.1/K)
which.test1=((i-1)*r.n+1):(i*r.n)
train.sites1=seq(1:nsites.1)[-which.test1]
r.n=round(nsites.2/K)
which.test2=((i-1)*r.n+1):(i*r.n)
train.sites2=seq(1:nsites.2)[-which.test2]
Y11 = Y1
Y11[which.test1,]=NA
Y22 = Y2
Y22[which.test2,]=NA
exit=LMC_fit(Y11,Y22, s1,s2,iters=iters,burn=burn)
for (j in burn:iters)
{
new.vals1=(exit$Y1.m[which.test1,,j]-Y1[which.test1,])^2
vals1=c(vals1,as.vector(new.vals1))
times1=c(times1,rep(1:dim(new.vals)[2],each=dim(new.vals)[1]))
sites1=c(sites1,rep(which.test1,dim(new.vals)[2]))
new.vals2=(exit$Y2.m[which.test2,,j]-Y2[which.test2,])^2
vals2=c(vals2,as.vector(new.vals2))
times2=c(times2,rep(1:dim(new.vals2)[2],each=dim(new.vals2)[1]))
sites2=c(sites2,rep(which.test2,dim(new.vals2)[2]))
}
posIter1=c(posIter1,rep(seq(burn:iters),prod(dim(new.vals1))))
ks1=c(ks1,rep(i,each=prod(dim(new.vals1))*(iters+1-burn)))
posIter2=c(posIter2,rep(seq(burn:iters),prod(dim(new.vals2))))
ks2=c(ks2,rep(i,each=prod(dim(new.vals2))*(iters+1-burn)))
}
# Create data frame
nchain=c()
param=c()
val=c()
iter=c()
freq=c()
nchain2=c()
param2=c()
val2=c()
iter2=c()
freq2=c()
for (i in 1:thin)
{
#rangeU
val=c(val,exit1$rangeU[,i])
param=c(param,rep("rangeU",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#rangeV
val=c(val,exit1$rangeV[,i])
param=c(param,rep("rangeV",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau1
val=c(val,exit1$tau1[,i])
param=c(param,rep("tau1",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau2
val=c(val,exit1$tau2[,i])
param=c(param,rep("tau2",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#A
val2=c(val2,as.vector(exit1$A[,,i]))
param2=c(param2,rep('A',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaU
val2=c(val2,as.vector(exit1$sigmaU[,,i]))
param2=c(param2,rep('sigmaU',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaV
val2=c(val2,as.vector(exit1$sigmaV[,,i]))
param2=c(param2,rep('sigmaV',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
}
res1=data.frame(val,param,nchain,iter,freq)
res2=data.frame(val=val2,param=param2,nchain=nchain2,iter=iter2,freq=freq2)
res1$nchain=as.factor(res1$nchain)
res2$nchain=as.factor(res2$nchain)
#plot range
prang1=ggplot(res1 %>% filter(param=='rangeU'))+geom_line(aes(x=iter,y=val,col=nchain))+theme_bw()
prang2=ggplot(res1 %>% filter(param=='rangeV'))+geom_line(aes(x=iter,y=val,col=nchain))+theme_bw()
# ggsave('PostRange1.png',prang1)
# ggsave('PostRange2.png',prang2)
ptau1=ggplot(res1 %>% filter(param=='tau1'))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+theme_bw()
ptau2=ggplot(res1 %>% filter(param=='tau2'))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+theme_bw()+ylim(c(0,1))
# ggsave('PostTau1.png',ptau1)
# ggsave('PostTau2.png',ptau2)
# plots by freq
freq1=1:round(dim(Y2)[2]/2)
freq2=(round(dim(Y2)[2]/2)+1):dim(Y2)[2]
pA_1=ggplot(res2%>% filter(param=='A',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
pA_2=ggplot(res2%>% filter(param=='A',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostA_frq1:15.png',pA_1)
# ggsave('PostA_frq16:30.png',pA_2)
psigmaU_1=ggplot(res2%>% filter(param=='sigmaU',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
psigmaU_2=ggplot(res2%>% filter(param=='sigmaU',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostSimaU_frq1:15.png',psigmaU_1)
# ggsave('PostSimaU_frq16:30.png',psigmaU_2)
psigmaV_1=ggplot(res2%>% filter(param=='sigmaV',freq %in%freq1))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
psigmaV_2=ggplot(res2%>% filter(param=='sigmaV',freq %in%freq2))+geom_line(aes(x=iter,y=val,col=nchain),alpha=0.5)+facet_wrap(~freq,scales='free')+theme_bw()
# ggsave('PostSigmaV_frq1:15.png',psigmaV_1)
# ggsave('PostSigmaV_frq16:30.png',psigmaV_2)
thin = 1
for (i in 1:thin)
{
#rangeU
val=c(val,exit1$rangeU[,i])
param=c(param,rep("rangeU",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#rangeV
val=c(val,exit1$rangeV[,i])
param=c(param,rep("rangeV",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau1
val=c(val,exit1$tau1[,i])
param=c(param,rep("tau1",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#tau2
val=c(val,exit1$tau2[,i])
param=c(param,rep("tau2",iters))
nchain=c(nchain,rep(i,iters))
iter=c(iter,1:iters)
freq=c(freq,rep(NA,iters))
#A
val2=c(val2,as.vector(exit1$A[,,i]))
param2=c(param2,rep('A',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaU
val2=c(val2,as.vector(exit1$sigmaU[,,i]))
param2=c(param2,rep('sigmaU',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
#sigmaV
val2=c(val2,as.vector(exit1$sigmaV[,,i]))
param2=c(param2,rep('sigmaV',ncol(Y2)*iters))
nchain2=c(nchain2,rep(i,ncol(Y2)*iters))
iter2=c(iter2,rep(1:iters,each=ncol(Y2)))
freq2=c(freq2,rep(1:ncol(Y2),iters))
}
exit1
end - start
1931 / 1800
1.07*6000
6420/60
107/60
