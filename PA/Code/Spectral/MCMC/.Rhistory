Y1.pred[which.test1,,j] <- beta.1+Z1p+rnorm(n=nt,sd=sqrt(tau1))
}
# Check prediction
for (k in 1:npreds)
{
a1=Y1.pred[which.test1,,k]
b1=Y1[which.test1,]
#RMSE
RMSE[k,(K*(i-1)+1):(K*i)]=sqrt(apply((a1-b1)^2,1,sum,na.rm=TRUE)/dim(a1)[2])
}
m=1
# Estimate coverage
for(k in which.test1)
{
samps=Y1.pred[m,,]
b=Y1[k,]
a=apply(samps,1,quantile,c(0.05,0.95))
cc=numeric(nt)
for (j in 1:nt)
{
cc[j]=between(b[j],a[1,j],a[2,j])
}
COV[k]=mean(cc,na.rm=TRUE)
m=m+1
}
}
station=rep(1:(dim(Y1)[1]),each=npreds)
rmse=as.vector(RMSE[,1:(dim(Y1)[1])])
iterss=rep(1:npreds,(dim(Y1)[1]))
RMSES=data.frame(station,rmse,iterss)
RMSES$station=as.factor(RMSES$station)
station=seq(1:(dim(Y1)[1]))
cov=COV
COV.pr=data.frame(COV,station)
COV.pr$station=as.factor(COV.pr$station)
#RMSE
ggplot(RMSES)+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
ggplot(RMSES %>% filter(station%in%seq(1,40)))+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
p1=ggplot(RMSES)+geom_histogram(aes(x=rmse))+theme_bw()+ labs(x = "",y='')
p2=ggplot(RMSES)+geom_boxplot(aes(y=rmse))+theme_bw()
figureRMSE <- grid.arrange(p1, p2,ncol=2,top=textGrob("RMSE"))
#ggsave('RMSE.pdf',figureRMSE)
# COV pro
ggplot(COV.pr)+geom_boxplot(aes(y=cov))+theme_bw()
p3=ggplot(COV.pr)+geom_histogram(aes(x=cov))+theme_bw()
#ggsave('covP.pdf',p3)
# simple Y vs Y pred plots
#pdf("real-predicted.pdf")
Station=2
n.pred=10
par(mfrow=c(5,5),mar=c(1,1,1,1))
for(i in 1:25)
{
Station=i
plot(Y1[,1],Y1.pred[,1,n.pred],xlab=c('real'),ylab=c('predicted'),asp=1)
abline(a=0,b=1)
}
#dev.off()
# fiting the model
iters=3000
burn=1000
for (i in 1:(dim(Y1)[1]/K))
{
#set train and set sets of EPA data
which.test1=seq(1:dim(Y1)[1])[(K*(i-1)+1):(K*i)]
train.sites1=seq(1:dim(Y1)[1])[-which.test1]
Y11 = Y1[train.sites1,]
s11=s1[train.sites1,]
sp1=s1[which.test1,]
# train set of PA (all)
Y22 = Y2
s22=s2
sp2=NULL # no test set
# fit model and predict
exit=LMC_fit(Y1=Y11,Y2=Y22, s1=s11,s2=s22,sp1=sp1,sp2=sp2,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
# Check prediction
for (k in 2:(iters-burn))
{
a1=exit$Y1p[,,k]
b1=Y1[which.test1,]
#RMSE
RMSE[k,(K*(i-1)+1):(K*i)]=sqrt(apply((a1-b1)^2,1,sum,na.rm=TRUE)/dim(a1)[2])
}
m=1
# Estimate coverage
for(k in which.test1)
{
samps=exit$Y1p[m,,]
b=Y1[k,]
a=apply(samps,1,quantile,c(0.05,0.95))
cc=numeric(nt)
for (j in 1:nt)
{
cc[j]=between(b[j],a[1,j],a[2,j])
}
COV[k]=mean(cc,na.rm=TRUE)
m=m+1
}
print(i)
}
# get data frame to plot
station=rep(1:(dim(Y1)[1]),each=2000)
rmse=as.vector(RMSE[,1:(dim(Y1)[1])])
iterss=rep(1:2000,(dim(Y1)[1]))
RMSES=data.frame(station,rmse,iterss)
RMSES$station=as.factor(RMSES$station)
station=seq(1:(dim(Y1)[1]))
cov=COV
COV.pr=data.frame(COV,station)
COV.pr$station=as.factor(COV.pr$station)
#RMSE
ggplot(RMSES)+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
ggplot(RMSES %>% filter(station%in%seq(1,40)))+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
ggplot(RMSES)+geom_histogram(aes(x=rmse))+theme_bw()
ggplot(RMSES)+geom_boxplot(aes(y=rmse))+theme_bw()
# COV pro
ggplot(COV.pr)+geom_histogram(aes(x=cov),bins = 100)
ggplot(COV.pr)+geom_boxplot(aes(y=cov))
# try prediction block
rm(ls = list())
# try prediction block
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
source('ExtraFunctions.R')
# try prediction block
rm(list = ls())
dirname(sys.frame(1)$ofile)
rm(list = ls())
# try prediction block
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# just check prediction (not inference)
#CV
K=10
npreds=50
Y1.pred= array(0,dim=c(nrow(Y1),ncol(Y1),npreds))
RMSE=matrix(0,npreds,dim(Y1)[1])
COV=numeric(dim(Y1)[1])
for (i in 1:(dim(Y1)[1]/K))
{
#set train and set sets of EPA data
which.test1=seq(1:dim(Y1)[1])[(K*(i-1)+1):(K*i)]
train.sites1=seq(1:dim(Y1)[1])[-which.test1]
Y11 = Y1[train.sites1,]
s11=s1[train.sites1,]
sp1=s1[which.test1,]
# train set of PA (all)
Y22 = Y2
s22=s2
sp2=NULL # no test set
n1       <- nrow(Y11)
n2       <- nrow(Y22)
nt       <- ncol(Y11)
m1       <- is.na(Y11)
m2       <- is.na(Y22)
d        <- as.matrix(dist(rbind(s11,s22)))
dv2 = as.matrix(dist(s22))
np1 = nrow(sp1)
np2  = nrow(sp2)
if (is.null(sp2))
{np2  = 0}
dp = as.matrix(dist(rbind(sp1,sp2)))
all.d=as.matrix(dist(rbind(s1,s2,sp1,sp2)))
Z1p = matrix(0,np1,nt)
# Kriging
Mp=exp_corr(all.d,range=rangeu)
Mp00=Mp[1:(n1+n2),1:(n1+n2)]
Mp11=Mp[(n1+n2+1):(n1+n2+np1+np2),(n1+n2+1):(n1+n2+np1+np2)]
Mp10=Mp[(n1+n2+1):(n1+n2+np1+np2),1:(n1+n2)]
Mp01=t(Mp10)
E00=eigen(Mp00)
E00.G=E00$vectors
E00.D=E00$values
Mp00.inv=E00.G%*%diag(1/E00.D)%*%t(E00.G)
AA=Mp10%*%Mp00.inv
a=Mp10%*%Mp00.inv%*%t(Mp10)
a=round(a,digits=7) # to avoid numercial underflow
B=Mp11-a
### sample U npreds times
for (j in 1:npreds)
{
Uls = matrix(0,n1+n2,nt)
for (r in 1:nt)
{
Uls[,r]=t(chol(Mp00))%*%rnorm(n1+n2,0,sqrt(sigmau[r]))
}
U1p = matrix(0,np1,nt)
for (r in 1:nt)
{
Au=AA%*%Uls[,r]
sigmaB=sigmau[r]*B
Ul.pred=rmvnorm(1,mean=Au,sigma=sigmaB)
U1p[,r]=Ul.pred[(1:np1)]
}
for(nn in 1:np1){Z1p[nn,] <- fft_real(U1p[nn,],inverse=TRUE)}
Y1.pred[which.test1,,j] <- beta.1+Z1p+rnorm(n=nt,sd=sqrt(tau1))
}
# Check prediction
for (k in 1:npreds)
{
a1=Y1.pred[which.test1,,k]
b1=Y1[which.test1,]
#RMSE
RMSE[k,(K*(i-1)+1):(K*i)]=sqrt(apply((a1-b1)^2,1,sum,na.rm=TRUE)/dim(a1)[2])
}
m=1
# Estimate coverage
for(k in which.test1)
{
samps=Y1.pred[m,,]
b=Y1[k,]
a=apply(samps,1,quantile,c(0.05,0.95))
cc=numeric(nt)
for (j in 1:nt)
{
cc[j]=between(b[j],a[1,j],a[2,j])
}
COV[k]=mean(cc,na.rm=TRUE)
m=m+1
}
}
station=rep(1:(dim(Y1)[1]),each=npreds)
rmse=as.vector(RMSE[,1:(dim(Y1)[1])])
iterss=rep(1:npreds,(dim(Y1)[1]))
RMSES=data.frame(station,rmse,iterss)
RMSES$station=as.factor(RMSES$station)
station=seq(1:(dim(Y1)[1]))
cov=COV
COV.pr=data.frame(COV,station)
COV.pr$station=as.factor(COV.pr$station)
#RMSE
ggplot(RMSES)+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
ggplot(RMSES %>% filter(station%in%seq(1,40)))+geom_boxplot(aes(y=rmse,x=station))+theme_bw()
p1=ggplot(RMSES)+geom_histogram(aes(x=rmse))+theme_bw()+ labs(x = "",y='')
p2=ggplot(RMSES)+geom_boxplot(aes(y=rmse))+theme_bw()
figureRMSE <- grid.arrange(p1, p2,ncol=2,top=textGrob("RMSE"))
# COV pro
ggplot(COV.pr)+geom_boxplot(aes(y=cov))+theme_bw()
p3=ggplot(COV.pr)+geom_histogram(aes(x=cov))+theme_bw()
Station=2
n.pred=10
par(mfrow=c(5,5),mar=c(1,1,1,1))
for(i in 1:25)
{
Station=i
plot(Y1[,1],Y1.pred[,1,n.pred],xlab=c('real'),ylab=c('predicted'),asp=1)
abline(a=0,b=1)
}
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
exit = LMC_fit(Y1.real, Y2.real, coords1, coords2)
range1 = exit$rangeU
range2 = exit$rangeV
sigma1 = exit$sigmaU
sigma2 = exit$sigmaV
tau1 = exit$tau1
tau2 = exit$tau2
Al = exit$A
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
exit = LMC_fit(Y1.real, Y2.real, coords1, coords2)
#simulate data
source('simAllTS.R') # load your data here
exit = LMC_fit(Y1.real, Y2.real, coords1, coords2)
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
exit
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
range1 = exit$rangeU
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
exit
rm(list = ls())
library(fields)
library(geoR)
library(truncnorm)
library(tidyverse)
library(mvtnorm)
library(gridExtra)
setwd("/Users/hongjianyang/Research/PAStudy/PA/Code/Spectral/MCMC/")
source('ExtraFunctions.R')
source('LMC_function.R')
#simulate data
source('simAllTS.R') # load your data here
# names(out)=c('rangeU','rangeV','sigmaU','sigmaV','tau1','tau2','A','Y1.m','Y2.m','Y1p')
# Real data are Y1.real and Y2.real
# Coordinates are coords1 and coords2
iters = 3000
burn=1000
exit = LMC_fit(Y1=Y1.real,Y2=Y2.real, s1=coords1,s2=coords2,sp1=NULL,sp2=NULL,
mean_range=0, sd_range=1, mean_var=0, sd_var=1, mean_rho=0,
sd_rho=10, iters=iters, burn=burn, thin=1, update=10)
range1 = exit$rangeU
range2 = exit$rangeV
sigma1 = exit$sigmaU
sigma2 = exit$sigmaV
tau1 = exit$tau1
tau2 = exit$tau2
Al = exit$A
range11 = range1[, 1]
range21 = range2[, 1]
sigma11 = sigma1[, , 1]
sigma21 = sigma2[, , 1]
sigma1mean = colMeans(t(sigma11))
sigma2mean = colMeans(t(sigma21))
tau11 = tau1[, 1]
tau21 = tau2[, 1]
A = Al[, 1]
# Actual v.s. recovery
plot(1:10, range1)
abline(rangeu,0,col=2,lwd=2)
plot(1:10, range1)
abline(rangev,0,col=2,lwd=2)
plot(sigmau, sigma1mean)
abline(0,1,col=2,lwd=2)
plot(sigmav, sigma2mean)
abline(0,1,col=2,lwd=2)
plot(1:10, tau11)
abline(tau1,0,col=2,lwd=2)
plot(1:10, tau21)
abline(tau2,1,col=2,lwd=2)
# Actual v.s. recovery
plot(1:10, range1)
range1
range11
dim(range1)
range11 = mean(range1)
range11
rangeu
mean(range2)
